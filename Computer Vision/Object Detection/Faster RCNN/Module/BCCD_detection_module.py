# -*- coding: utf-8 -*-
"""Detection module.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1shUZ9PDL9S_559hGzCY7wrVq77jcjHgW
"""


import cv2
import matplotlib.pyplot as plt
import mmcv
from mmdet.apis import init_detector, inference_detector, show_result_pyplot
import os
import numpy as np


def get_detected_image(model, image, score_threshold):
    labels_to_names_seq = {0:'WBC', 1:'RBC', 2:'Platelets'}

    draw_image = image.copy()
    bbox_color = (0, 255, 0)
    text_color = (0, 0, 255)

    results = inference_detector(model, image)

    for result_idx, result in enumerate(results):
        if len(result) == 0:
            continue

        result_filtered = result[np.where(result[:, 4] > score_threshold)]

        for filtered in result_filtered:
            left = int(filtered[0])
            top = int(filtered[1])
            right = int(filtered[2])
            bottom = int(filtered[3])
            caption = f"{labels_to_names_seq[result_idx]}:{filtered[4]:4f}"
            cv2.rectangle(draw_image, (left, top), (right, bottom), color=bbox_color, thickness=2)
            cv2.putText(draw_image, caption,(left, top+10), cv2.FONT_HERSHEY_SIMPLEX, 0.37, color=text_color, thickness=1)

    return draw_image

def visualize_detected_image(model, images, score_threshold):
    
    if type(images) == type(np.array([])):
        fig,ax = plt.subplots(figsize=(10, 10))
        
        detected_image = get_detected_image(model, images, score_threshold)
        detected_image = cv2.cvtColor(detected_image, cv2.COLOR_BGR2RGB)

        ax.get_xaxis().set_visible(False)
        ax.get_yaxis().set_visible(False)
        ax.imshow(detected_image)
        
        fig.tight_layout()
        plt.show()

    elif type(images)==type([]) and len(images) >=2:
        fig, axes = plt.subplots(len(images), 1, figsize=(5, 4*len(images)))

        for idx, image in enumerate(images):
            detected_image = get_detected_image(model, image, score_threshold)
            detected_image = cv2.cvtColor(detected_image, cv2.COLOR_BGR2RGB)
            
            axes[idx].get_xaxis().set_visible(False)
            axes[idx].get_yaxis().set_visible(False)
            axes[idx].imshow(detected_image)
        
        fig.tight_layout()
        plt.show()
    else:
        assert False, 'ndarray형태의 단일 이미지 또는 list형태의 복수 이미지를 입력하세요(list원소의 형태는 ndarray)'


def detection_module(images, score_threshold=0.3):
    config_file = '/content/drive/MyDrive/innerwave/bccd_faster_rcnn_conf.py'
    checkpoint_file = '/content/drive/MyDrive/innerwave/epoch_12.pth'
    model = init_detector(config_file, checkpoint_file, device='cuda:0')

    visualize_detected_image(model, images, score_threshold)